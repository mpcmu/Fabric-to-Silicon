
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.33+34 (git sha1 b84ed5d3a, clang 10.0.0-4ubuntu1 -fPIC -Os)


-- Executing script file `scripts/synth.ys' --
 >>> LOG: READING VERILOG files TOP_MODULE: custmuleg

1. Executing Verilog-2005 frontend: /home/kmgroup/projects/tutorial/fpga_cad_flow/example_designs/simple_fpga_cust_tile_test/inputs/custmul.v
Parsing Verilog input from `/home/kmgroup/projects/tutorial/fpga_cad_flow/example_designs/simple_fpga_cust_tile_test/inputs/custmul.v' to AST representation.
Generating RTLIL representation for module `\custmuleg'.
Successfully finished Verilog frontend.

2. Executing Verilog-2005 frontend: /home/kmgroup/projects/tutorial/fpga_cad_flow/example_designs/simple_fpga_cust_tile_test/inputs/bbmodels.v
Parsing Verilog input from `/home/kmgroup/projects/tutorial/fpga_cad_flow/example_designs/simple_fpga_cust_tile_test/inputs/bbmodels.v' to AST representation.
Generating RTLIL representation for module `\clbalu'.
Generating RTLIL representation for module `\custmul'.
Successfully finished Verilog frontend.

3. Executing HIERARCHY pass (managing design hierarchy).

3.1. Analyzing design hierarchy..
Top module:  \custmuleg

3.2. Analyzing design hierarchy..
Top module:  \custmuleg
Removed 0 unused modules.
 >>> LOG: GENERIC MAPPING

4. Printing statistics.

=== custmuleg ===

   Number of wires:                 12
   Number of wire bits:            327
   Number of public wires:           8
   Number of public wire bits:     307
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              2
   Number of cells:                  1
     custmul                         1

5. Executing PROC pass (convert processes to netlists).

5.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

5.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

5.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 5 assignments to connections.

5.4. Executing PROC_INIT pass (extract init attributes).

5.5. Executing PROC_ARST pass (detect async resets in processes).

5.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

5.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\custmuleg.$proc$/home/kmgroup/projects/tutorial/fpga_cad_flow/example_designs/simple_fpga_cust_tile_test/inputs/custmul.v:31$2'.
Creating decoders for process `\custmuleg.$proc$/home/kmgroup/projects/tutorial/fpga_cad_flow/example_designs/simple_fpga_cust_tile_test/inputs/custmul.v:15$1'.

5.8. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\custmuleg.\OUT [1:0]' from process `\custmuleg.$proc$/home/kmgroup/projects/tutorial/fpga_cad_flow/example_designs/simple_fpga_cust_tile_test/inputs/custmul.v:15$1'.
No latch inferred for signal `\custmuleg.\OUT [127:112]' from process `\custmuleg.$proc$/home/kmgroup/projects/tutorial/fpga_cad_flow/example_designs/simple_fpga_cust_tile_test/inputs/custmul.v:15$1'.

5.9. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\custmuleg.\R0' using process `\custmuleg.$proc$/home/kmgroup/projects/tutorial/fpga_cad_flow/example_designs/simple_fpga_cust_tile_test/inputs/custmul.v:31$2'.
  created $dff cell `$procdff$3' with positive edge clock.
Creating register for signal `\custmuleg.\R0_1' using process `\custmuleg.$proc$/home/kmgroup/projects/tutorial/fpga_cad_flow/example_designs/simple_fpga_cust_tile_test/inputs/custmul.v:31$2'.
  created $dff cell `$procdff$4' with positive edge clock.

5.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

5.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `custmuleg.$proc$/home/kmgroup/projects/tutorial/fpga_cad_flow/example_designs/simple_fpga_cust_tile_test/inputs/custmul.v:31$2'.
Removing empty process `custmuleg.$proc$/home/kmgroup/projects/tutorial/fpga_cad_flow/example_designs/simple_fpga_cust_tile_test/inputs/custmul.v:15$1'.
Cleaned up 0 empty switches.

5.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module custmuleg.

6. Executing FLATTEN pass (flatten design).

7. Executing OPT_EXPR pass (perform const folding).
Optimizing module custmuleg.

8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \custmuleg..
Removed 0 unused cells and 4 unused wires.
<suppressed ~1 debug messages>

9. Executing CHECK pass (checking for obvious problems).
Checking module custmuleg...
Warning: Wire custmuleg.\OUT [111] is used but has no driver.
Warning: Wire custmuleg.\OUT [110] is used but has no driver.
Warning: Wire custmuleg.\OUT [109] is used but has no driver.
Warning: Wire custmuleg.\OUT [108] is used but has no driver.
Warning: Wire custmuleg.\OUT [107] is used but has no driver.
Warning: Wire custmuleg.\OUT [106] is used but has no driver.
Warning: Wire custmuleg.\OUT [105] is used but has no driver.
Warning: Wire custmuleg.\OUT [104] is used but has no driver.
Warning: Wire custmuleg.\OUT [103] is used but has no driver.
Warning: Wire custmuleg.\OUT [102] is used but has no driver.
Warning: Wire custmuleg.\OUT [101] is used but has no driver.
Warning: Wire custmuleg.\OUT [100] is used but has no driver.
Warning: Wire custmuleg.\OUT [99] is used but has no driver.
Warning: Wire custmuleg.\OUT [98] is used but has no driver.
Warning: Wire custmuleg.\OUT [97] is used but has no driver.
Warning: Wire custmuleg.\OUT [96] is used but has no driver.
Warning: Wire custmuleg.\OUT [95] is used but has no driver.
Warning: Wire custmuleg.\OUT [94] is used but has no driver.
Warning: Wire custmuleg.\OUT [93] is used but has no driver.
Warning: Wire custmuleg.\OUT [92] is used but has no driver.
Warning: Wire custmuleg.\OUT [91] is used but has no driver.
Warning: Wire custmuleg.\OUT [90] is used but has no driver.
Warning: Wire custmuleg.\OUT [89] is used but has no driver.
Warning: Wire custmuleg.\OUT [88] is used but has no driver.
Warning: Wire custmuleg.\OUT [87] is used but has no driver.
Warning: Wire custmuleg.\OUT [86] is used but has no driver.
Warning: Wire custmuleg.\OUT [85] is used but has no driver.
Warning: Wire custmuleg.\OUT [84] is used but has no driver.
Warning: Wire custmuleg.\OUT [83] is used but has no driver.
Warning: Wire custmuleg.\OUT [82] is used but has no driver.
Warning: Wire custmuleg.\OUT [81] is used but has no driver.
Warning: Wire custmuleg.\OUT [80] is used but has no driver.
Warning: Wire custmuleg.\OUT [79] is used but has no driver.
Warning: Wire custmuleg.\OUT [78] is used but has no driver.
Warning: Wire custmuleg.\OUT [77] is used but has no driver.
Warning: Wire custmuleg.\OUT [76] is used but has no driver.
Warning: Wire custmuleg.\OUT [75] is used but has no driver.
Warning: Wire custmuleg.\OUT [74] is used but has no driver.
Warning: Wire custmuleg.\OUT [73] is used but has no driver.
Warning: Wire custmuleg.\OUT [72] is used but has no driver.
Warning: Wire custmuleg.\OUT [71] is used but has no driver.
Warning: Wire custmuleg.\OUT [70] is used but has no driver.
Warning: Wire custmuleg.\OUT [69] is used but has no driver.
Warning: Wire custmuleg.\OUT [68] is used but has no driver.
Warning: Wire custmuleg.\OUT [67] is used but has no driver.
Warning: Wire custmuleg.\OUT [66] is used but has no driver.
Warning: Wire custmuleg.\OUT [65] is used but has no driver.
Warning: Wire custmuleg.\OUT [64] is used but has no driver.
Warning: Wire custmuleg.\OUT [63] is used but has no driver.
Warning: Wire custmuleg.\OUT [62] is used but has no driver.
Warning: Wire custmuleg.\OUT [61] is used but has no driver.
Warning: Wire custmuleg.\OUT [60] is used but has no driver.
Warning: Wire custmuleg.\OUT [59] is used but has no driver.
Warning: Wire custmuleg.\OUT [58] is used but has no driver.
Warning: Wire custmuleg.\OUT [57] is used but has no driver.
Warning: Wire custmuleg.\OUT [56] is used but has no driver.
Warning: Wire custmuleg.\OUT [55] is used but has no driver.
Warning: Wire custmuleg.\OUT [54] is used but has no driver.
Warning: Wire custmuleg.\OUT [53] is used but has no driver.
Warning: Wire custmuleg.\OUT [52] is used but has no driver.
Warning: Wire custmuleg.\OUT [51] is used but has no driver.
Warning: Wire custmuleg.\OUT [50] is used but has no driver.
Warning: Wire custmuleg.\OUT [49] is used but has no driver.
Warning: Wire custmuleg.\OUT [48] is used but has no driver.
Warning: Wire custmuleg.\OUT [47] is used but has no driver.
Warning: Wire custmuleg.\OUT [46] is used but has no driver.
Warning: Wire custmuleg.\OUT [45] is used but has no driver.
Warning: Wire custmuleg.\OUT [44] is used but has no driver.
Warning: Wire custmuleg.\OUT [43] is used but has no driver.
Warning: Wire custmuleg.\OUT [42] is used but has no driver.
Warning: Wire custmuleg.\OUT [41] is used but has no driver.
Warning: Wire custmuleg.\OUT [40] is used but has no driver.
Warning: Wire custmuleg.\OUT [39] is used but has no driver.
Warning: Wire custmuleg.\OUT [38] is used but has no driver.
Warning: Wire custmuleg.\OUT [37] is used but has no driver.
Warning: Wire custmuleg.\OUT [36] is used but has no driver.
Warning: Wire custmuleg.\OUT [35] is used but has no driver.
Warning: Wire custmuleg.\OUT [34] is used but has no driver.
Warning: Wire custmuleg.\OUT [33] is used but has no driver.
Warning: Wire custmuleg.\OUT [32] is used but has no driver.
Warning: Wire custmuleg.\OUT [31] is used but has no driver.
Warning: Wire custmuleg.\OUT [30] is used but has no driver.
Warning: Wire custmuleg.\OUT [29] is used but has no driver.
Warning: Wire custmuleg.\OUT [28] is used but has no driver.
Warning: Wire custmuleg.\OUT [27] is used but has no driver.
Warning: Wire custmuleg.\OUT [26] is used but has no driver.
Warning: Wire custmuleg.\OUT [25] is used but has no driver.
Warning: Wire custmuleg.\OUT [24] is used but has no driver.
Warning: Wire custmuleg.\OUT [23] is used but has no driver.
Warning: Wire custmuleg.\OUT [22] is used but has no driver.
Warning: Wire custmuleg.\OUT [21] is used but has no driver.
Warning: Wire custmuleg.\OUT [20] is used but has no driver.
Warning: Wire custmuleg.\OUT [19] is used but has no driver.
Warning: Wire custmuleg.\OUT [18] is used but has no driver.
Warning: Wire custmuleg.\OUT [17] is used but has no driver.
Warning: Wire custmuleg.\OUT [16] is used but has no driver.
Warning: Wire custmuleg.\OUT [15] is used but has no driver.
Warning: Wire custmuleg.\OUT [14] is used but has no driver.
Warning: Wire custmuleg.\OUT [13] is used but has no driver.
Warning: Wire custmuleg.\OUT [12] is used but has no driver.
Warning: Wire custmuleg.\OUT [11] is used but has no driver.
Warning: Wire custmuleg.\OUT [10] is used but has no driver.
Warning: Wire custmuleg.\OUT [9] is used but has no driver.
Warning: Wire custmuleg.\OUT [8] is used but has no driver.
Warning: Wire custmuleg.\OUT [7] is used but has no driver.
Warning: Wire custmuleg.\OUT [6] is used but has no driver.
Warning: Wire custmuleg.\OUT [5] is used but has no driver.
Warning: Wire custmuleg.\OUT [4] is used but has no driver.
Warning: Wire custmuleg.\OUT [3] is used but has no driver.
Warning: Wire custmuleg.\OUT [2] is used but has no driver.
Found and reported 110 problems.

10. Printing statistics.

=== custmuleg ===

   Number of wires:                  8
   Number of wire bits:            307
   Number of public wires:           8
   Number of public wire bits:     307
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  3
     $dff_1                          2
     custmul                         1

11. Executing OPT pass (performing simple optimizations).

11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module custmuleg.

11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\custmuleg'.
Removed a total of 0 cells.

11.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \custmuleg..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

11.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \custmuleg.
Performed a total of 0 changes.

11.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\custmuleg'.
Removed a total of 0 cells.

11.6. Executing OPT_DFF pass (perform DFF optimizations).

11.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \custmuleg..

11.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module custmuleg.

11.9. Finished OPT passes. (There is nothing left to do.)

12. Executing WREDUCE pass (reducing word size of cells).

13. Executing PEEPOPT pass (run peephole optimizers).

14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \custmuleg..
 >>> LOG: OPT

15. Printing statistics.

=== custmuleg ===

   Number of wires:                  8
   Number of wire bits:            307
   Number of public wires:           8
   Number of public wire bits:     307
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  3
     $dff_1                          2
     custmul                         1

16. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module custmuleg:
  created 0 $alu and 0 $macc cells.

17. Executing SHARE pass (SAT-based resource sharing).

18. Executing OPT pass (performing simple optimizations).

18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module custmuleg.

18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\custmuleg'.
Removed a total of 0 cells.

18.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \custmuleg..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

18.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \custmuleg.
Performed a total of 0 changes.

18.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\custmuleg'.
Removed a total of 0 cells.

18.6. Executing OPT_DFF pass (perform DFF optimizations).

18.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \custmuleg..

18.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module custmuleg.

18.9. Finished OPT passes. (There is nothing left to do.)

19. Printing statistics.

=== custmuleg ===

   Number of wires:                  8
   Number of wire bits:            307
   Number of public wires:           8
   Number of public wire bits:     307
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  3
     $dff_1                          2
     custmul                         1

20. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

21. Executing OPT pass (performing simple optimizations).

21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module custmuleg.
<suppressed ~6 debug messages>

21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\custmuleg'.
Removed a total of 0 cells.

21.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \custmuleg..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

21.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \custmuleg.
Performed a total of 0 changes.

21.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\custmuleg'.
Removed a total of 0 cells.

21.6. Executing OPT_SHARE pass.

21.7. Executing OPT_DFF pass (perform DFF optimizations).

21.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \custmuleg..

21.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module custmuleg.

21.10. Finished OPT passes. (There is nothing left to do.)

22. Executing TECHMAP pass (map to technology primitives).

22.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

22.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $dff.
No more expansions possible.
<suppressed ~75 debug messages>

23. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
 >>> LOG: LUT MAPPING

24. Printing statistics.

=== custmuleg ===

   Number of wires:                  8
   Number of wire bits:            307
   Number of public wires:           8
   Number of public wire bits:     307
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  3
     $_DFF_P_                        2
     custmul                         1

25. Executing OPT_LUT pass (optimize LUTs).
Discovering LUTs.
Number of LUTs:        0

Eliminating LUTs.
Number of LUTs:        0

Combining LUTs.
Number of LUTs:        0

Eliminated 0 LUTs.
Combined 0 LUTs.

26. Executing ABC pass (technology mapping using ABC).

26.1. Extracting gate netlist of module `\custmuleg' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

27. Executing OPT pass (performing simple optimizations).

27.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module custmuleg.

27.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\custmuleg'.
Removed a total of 0 cells.

27.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \custmuleg..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

27.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \custmuleg.
Performed a total of 0 changes.

27.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\custmuleg'.
Removed a total of 0 cells.

27.6. Executing OPT_DFF pass (perform DFF optimizations).

27.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \custmuleg..

27.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module custmuleg.

27.9. Finished OPT passes. (There is nothing left to do.)

28. Executing FLATTEN pass (flatten design).

29. Executing TECHMAP pass (map to technology primitives).

29.1. Executing Verilog-2005 frontend: scripts/async_flop.v
Parsing Verilog input from `scripts/async_flop.v' to AST representation.
Successfully finished Verilog frontend.

29.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~2 debug messages>

30. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \custmuleg..
Removed 0 unused cells and 2 unused wires.
<suppressed ~2 debug messages>

31. Executing OPT_LUT pass (optimize LUTs).
Discovering LUTs.
Number of LUTs:        0

Eliminating LUTs.
Number of LUTs:        0

Combining LUTs.
Number of LUTs:        0

Eliminated 0 LUTs.
Combined 0 LUTs.

32. Printing statistics.

=== custmuleg ===

   Number of wires:                  6
   Number of wire bits:            275
   Number of public wires:           6
   Number of public wire bits:     275
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  3
     $_DFF_P_                        2
     custmul                         1

 >>> LOG: WRITING VERILOG /home/kmgroup/projects/tutorial/fpga_cad_flow/example_designs/simple_fpga_cust_tile_test/yosys/outputs/custmuleg_syn.v

33. Executing Verilog backend.

33.1. Executing BMUXMAP pass.

33.2. Executing DEMUXMAP pass.
Dumping module `\custmuleg'.
 >>> LOG: WRITING BLIF /home/kmgroup/projects/tutorial/fpga_cad_flow/example_designs/simple_fpga_cust_tile_test/yosys/outputs/custmuleg_syn.blif

34. Executing BLIF backend.

Warnings: 110 unique messages, 110 total
End of script. Logfile hash: df7cd5d0c5, CPU: user 0.02s system 0.01s, MEM: 17.20 MB peak
Yosys 0.33+34 (git sha1 b84ed5d3a, clang 10.0.0-4ubuntu1 -fPIC -Os)
Time spent: 29% 6x read_verilog (0 sec), 16% 10x opt_expr (0 sec), ...
