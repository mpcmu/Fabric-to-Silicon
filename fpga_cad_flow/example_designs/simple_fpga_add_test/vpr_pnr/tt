VPR FPGA Placement and Routing.
Version: 8.1.0-dev+7a9676256
Revision: v8.0.0-7543-g7a9676256
Compiled: 2023-11-03T14:58:29
Compiler: GNU 9.4.0 on Linux-5.15.0-57-generic x86_64
Build Info: release IPO VTR_ASSERT_LEVEL=2

University of Toronto
verilogtorouting.org
vtr-users@googlegroups.com
This is free open source code under MIT license.

usage: vpr architecture circuit [--pack] [--place] [--route] [--analysis] 
       [--disp {on, off}] [--save_graphics {on, off}] 
       [--graphics_commands GRAPHICS_COMMANDS] [-h] [--version] 
       [--device DEVICE_NAME] [-j NUM_WORKERS] [--timing_analysis {on, off}] 
       [--disable_errors DISABLE_ERRORS] [--suppress_warnings SUPPRESS_WARNINGS] 
       [--terminate_if_timing_fails {on, off}] 
       [--route_chan_width CHANNEL_WIDTH] [OTHER_OPTIONS ...]

Implements the specified circuit onto the target FPGA architecture by performing 
packing/placement/routing, and analyzes the result.

Attempts to find the minimum routable channel width, unless a fixed channel 
width is specified with --route_chan_width.

positional arguments:
  architecture      FPGA Architecture description file
                       - XML: this is the default frontend format
                       - FPGA Interchange: device architecture file in the FPGA 
                    Interchange format
  circuit           Circuit file (or circuit name if --circuit_file specified)

stage options:
  --pack            Run packing (Default: off)
  --place           Run placement (Default: off)
  --route           Run routing (Default: off)
  --analysis        Run analysis (Default: off)

  If none of the stage options are specified, all stages are run.
  Analysis is always run after routing, unless the implementation
  is illegal.
  
  If the implementation is illegal analysis can be forced by explicitly
  specifying the --analysis option.

graphics options:
  --disp {on, off}  Enable or disable interactive graphics (Default: off)
  --auto {0, 1, 2}  Controls how often VPR pauses for interactive graphics 
                    (requiring Proceed to be clicked). Higher values pause less 
                    frequently (Default: 1)
  --save_graphics {on, off}
                    Save all graphical contents to PDF files (Default: off)
  --graphics_commands GRAPHICS_COMMANDS
                    A set of semi-colon seperated graphics commands. 
                    Commands must be surrounded by quotation marks (e.g. 
                    --graphics_commands "save_graphics place.png")
                       Commands:
                          * save_graphics <file>
                               Saves graphics to the specified file (.png/.pdf/
                               .svg). If <file> contains '{i}', it will be
                               replaced with an integer which increments
                               each time graphics is invoked.
                          * set_macros <int>
                               Sets the placement macro drawing state
                          * set_nets <int>
                               Sets the net drawing state
                          * set_cpd <int>
                               Sets the criticla path delay drawing state
                          * set_routing_util <int>
                               Sets the routing utilization drawing state
                          * set_clip_routing_util <int>
                               Sets whether routing utilization values are
                               clipped to [0., 1.]. Useful when a consistent
                               scale is needed across images
                          * set_draw_block_outlines <int>
                               Sets whether blocks have an outline drawn around
                               them
                          * set_draw_block_text <int>
                               Sets whether blocks have label text drawn on them
                          * set_draw_block_internals <int>
                               Sets the level to which block internals are drawn
                          * set_draw_net_max_fanout <int>
                               Sets the maximum fanout for nets to be drawn (if
                               fanout is beyond this value the net will not be
                               drawn)
                          * set_congestion <int>
                               Sets the routing congestion drawing state
                          * exit <int>
                               Exits VPR with specified exit code
                    
                       Example:
                         'save_graphics place.png; \
                          set_nets 1; save_graphics nets1.png;\
                          set_nets 2; save_graphics nets2.png; set_nets 0;\
                          set_cpd 1; save_graphics cpd1.png; \
                          set_cpd 3; save_graphics cpd3.png; set_cpd 0; \
                          set_routing_util 5; save_graphics routing_util5.png; \
                          set_routing_util 0; \
                          set_congestion 1; save_graphics congestion1.png;'
                    
                       The above toggles various graphics settings (e.g. drawing
                       nets, drawing critical path) and then saves the results 
                    to
                       .png files.
                    
                       Note that drawing state is reset to its previous state 
                    after
                       these commands are invoked.
                    
                       Like the interactive graphics --disp option, the --auto
                       option controls how often the commands specified with
                       this option are invoked.
                    

general options:
  -h, --help        Show this help message then exit
  --version         Show version information then exit
  --device DEVICE_NAME
                    Controls which device layout/floorplan is used from the 
                    architecture file. 'auto' uses the smallest device which 
                    satisfies the circuit's resource requirements. (Default: auto)
  -j NUM_WORKERS, --num_workers NUM_WORKERS
                    Controls how many parallel workers VPR may use:
                     *  1 implies VPR will execute serially,
                     * >1 implies VPR may execute in parallel with up to the
                          specified concurrency, and
                     *  0 implies VPR may execute in parallel with up to the
                          maximum concurrency supported by the host machine.
                    If this option is not specified it may be set from the 
                    'VPR_NUM_WORKERS' environment variable; otherwise the 
                    default is used. (Default: 1)
  --timing_analysis {on, off}
                    Controls whether timing analysis (and timing driven 
                    optimizations) are enabled. (Default: on)
  --timing_update_type {auto, full, incremental}
                    Controls how timing analysis updates are performed:
                     * auto: VPR decides
                     * full: Full timing updates are performed (may be faster 
                             if circuit timing has changed significantly)
                     * incr: Incremental timing updates are performed (may be 
                             faster in the face of smaller circuit timing 
                    changes)
                     (Default: auto)
  --echo_file {on, off}
                    Generate echo files of key internal data structures. Useful 
                    for debugging VPR, and typically end in .echo (Default: off)
  --verify_file_digests {on, off}
                    Verify that files loaded by VPR (e.g. architecture, netlist, 
                    previous packing/placement/routing) are consistent (Default: on)
  --target_utilization TARGET_UTILIZATION
                    Sets the target device utilization. This corresponds to the 
                    maximum target fraction of device grid-tiles to be used. A 
                    value of 1.0 means the smallest device (which fits the 
                    circuit) will be used. (Default: 1.0)
  --constant_net_method {global, route}
                    Specifies how constant nets (i.e. those driven to a constant
                    value) are handled:
                     * global: Treat constant nets as globals (not routed)
                     * route : Treat constant nets as normal nets (routed)
                     (Default: global)
  --clock_modeling {ideal, route, dedicated_network}
                    Specifies how clock nets are handled
                     * ideal: Treat clock pins as ideal
                              (i.e. no routing delays on clocks)
                     * route: Treat the clock pins as normal nets
                              (i.e. routed using inter-block routing)
                     * dedicated_network : Build a dedicated clock network based 
                    on the
                                           clock network specified in the 
                    architecture file
                     (Default: ideal)
  --two_stage_clock_routing
                    Routes clock nets in two stages if using a dedicated clock 
                    network.
                     * First stage: From the Net source to a dedicated clock 
                    network source
                     * Second stage: From the clock network source to net sinks
                     (Default: off)
  --exit_before_pack {on, off}
                    Causes VPR to exit before packing starts (useful for 
                    statistics collection) (Default: off)
  --strict_checks {on, off}
                    Controls whether VPR enforces some consistency checks 
                    strictly (as errors) or treats them as warnings. Usually 
                    these checks indicate an issue with either the targetted 
                    architecture, or consistency issues with VPR's internal data 
                    structures/algorithms (possibly harming optimization 
                    quality). In specific circumstances on specific 
                    architectures these checks may be too restrictive and can be 
                    turned off. However exercise extreme caution when turning 
                    this option off -- be sure you completely understand why the 
                    issue is being flagged, and why it is OK to treat as a 
                    warning instead of an error. (Default: on)
  --disable_errors DISABLE_ERRORS
                    Parses a list of functions for which the errors are going to 
                    be treated as warnings.
                    Each function in the list is delimited by `:`
                    This option should be only used for development purposes.
  --suppress_warnings SUPPRESS_WARNINGS
                    Parses a list of functions for which the warnings will be 
                    suppressed on stdout.
                    The first element of the list is the name of the output log 
                    file with the suppressed warnings.
                    The output log file can be omitted to completely suppress 
                    warnings.
                    The file name and the list of functions is separated by `,`. 
                    If no output log file is specified,
                    the comma is not needed.
                    Each function in the list is delimited by `:`
                    This option should be only used for development purposes.
  --allow_dangling_combinational_nodes {on, off}
                    Option to allow dangling combinational nodes in the timing 
                    graph.
                    This option should normally be off, as dangling 
                    combinational nodes are unusual
                    in the timing graph and may indicate a problem in the 
                    circuit or architecture.
                    Unless you understand why your architecture/circuit can have 
                    valid dangling combinational nodes, this option should be 
                    off.
                    In general this is a dev-only option and should not be 
                    turned on by the end-user. (Default: off)
  --terminate_if_timing_fails {on, off}
                    During final timing analysis after routing, if a negative 
                    slack anywhere is returned and this option is set, 
                    VPR_FATAL_ERROR is called and processing ends. (Default: off)

file options:
  --arch_format {vtr, fpga-interchange}
                    File format for the input atom-level circuit/netlist.
                     * vtr: Architecture expressed in the explicit VTR format * 
                    fpga-interchage: Architecture expressed in the FPGA 
                    Interchange schema format
                     (Default: vtr)
  --circuit_file CIRCUIT_FILE
                    Path to technology mapped circuit
  --circuit_format {auto, blif, eblif, fpga-interchange}
                    File format for the input atom-level circuit/netlist.
                     * auto: infer from file extension
                     * blif: Strict structural BLIF format
                     * eblif: Structural BLIF format with the extensions:
                               .conn  - Connection between two wires
                               .cname - Custom name for atom primitive
                               .param - Parameter on atom primitive
                               .attr  - Attribute on atom primitive
                     * fpga-interchage: Logical netlist in FPGA Interchange 
                    schema format
                     (Default: auto)
  --net_file NET_FILE
                    Path to packed netlist file
  --place_file PLACE_FILE
                    Path to placement file
  --route_file ROUTE_FILE
                    Path to routing file
  --sdc_file SDC_FILE
                    Path to timing constraints file in SDC format
  --read_rr_graph RR_GRAPH_FILE
                    The routing resource graph file to load. The loaded routing 
                    resource graph overrides any routing architecture specified 
                    in the architecture file.
  --write_rr_graph RR_GRAPH_FILE
                    Writes the routing resource graph to the specified file
  --read_vpr_constraints READ_VPR_CONSTRAINTS
                    Reads the floorplanning constraints that packing and 
                    placement must respect from the specified XML file.
  --write_vpr_constraints WRITE_VPR_CONSTRAINTS
                    Writes out new floorplanning constraints based on current 
                    placement to the specified XML file.
  --read_router_lookahead READ_ROUTER_LOOKAHEAD
                    Reads the lookahead data from the specified file instead of 
                    computing it.
  --read_intra_cluster_router_lookahead READ_INTRA_CLUSTER_ROUTER_LOOKAHEAD
                    Reads the intra-cluster lookahead data from the specified 
                    file.
  --write_router_lookahead WRITE_ROUTER_LOOKAHEAD
                    Writes the lookahead data to the specified file.
  --write_intra_cluster_router_lookahead WRITE_INTRA_CLUSTER_ROUTER_LOOKAHEAD
                    Writes the intra-cluster lookahead data to the specified 
                    file.
  --read_placement_delay_lookup READ_PLACEMENT_DELAY_LOOKUP
                    Reads the placement delay lookup from the specified file 
                    instead of computing it.
  --write_placement_delay_lookup WRITE_PLACEMENT_DELAY_LOOKUP
                    Writes the placement delay lookup to the specified file.
  --outfile_prefix OUTFILE_PREFIX
                    Prefix for output files
  --write_block_usage WRITE_BLOCK_USAGE
                    Writes the cluster-level block types usage summary to the 
                    specified JSON, XML or TXT file.

netlist options:
  --absorb_buffer_luts {on, off}
                    Controls whether LUTS programmed as buffers are absorbed by 
                    downstream logic (Default: on)
  --const_gen_inference {none, comb, comb_seq}
                    Controls how constant generators are detected
                     * none    : No constant generator inference is performed
                     * comb    : Only combinational primitives are considered
                                 for constant generator inference (always safe)
                     * comb_seq: Both combinational and sequential primitives
                                 are considered for constant generator inference
                                 (usually safe)
                     (Default: comb_seq)
  --sweep_dangling_primary_ios {on, off}
                    Controls whether dangling primary inputs and outputs are 
                    removed from the netlist (Default: on)
  --sweep_dangling_nets {on, off}
                    Controls whether dangling nets are removed from the netlist (Default: on)
  --sweep_dangling_blocks {on, off}
                    Controls whether dangling blocks are removed from the netlist (Default: on)
  --sweep_constant_primary_outputs {on, off}
                    Controls whether primary outputs driven by constant values 
                    are removed from the netlist (Default: off)
  --netlist_verbosity NETLIST_VERBOSITY
                    Controls how much detail netlist processing produces about 
                    detected netlist characteristics (e.g. constant generator 
                    detection) and applied netlist modifications (e.g. swept 
                    netlist components). Larger values produce more detail. (Default: 1)

packing options:
  --connection_driven_clustering {on, off}
                    Controls whether or not packing prioritizes the absorption 
                    of nets with fewer connections into a complex logic block 
                    over nets with more connections (Default: on)
  --allow_unrelated_clustering {on, off, auto}
                    Controls whether primitives with no attraction to a cluster 
                    can be packed into it.
                    Turning unrelated clustering on can increase packing density 
                    (fewer blocks are used), but at the cost of worse 
                    routability.
                     * on  : Unrelated clustering enabled
                     * off : Unrelated clustering disabled
                     * auto: Dynamically enabled/disabled (based on density)
                     (Default: auto)
  --alpha_clustering ALPHA_CLUSTERING
                    Parameter that weights the optimization of timing vs area. 
                    0.0 focuses solely on area, 1.0 solely on timing. (Default: 0.75)
  --beta_clustering BETA_CLUSTERING
                    Parameter that weights the absorption of small nets vs 
                    signal sharing. 0.0 focuses solely on sharing, 1.0 solely on 
                    small net absoprtion. Only meaningful if 
                    --connection_driven_clustering=on (Default: 0.9)
  --timing_driven_clustering {on, off}
                    Controls whether custering optimizes for timing (Default: on)
  --cluster_seed_type {timing, max_inputs, blend, max_pins, max_input_pins, blend2}
                    Controls how primitives are chosen as seeds. (Default: 
                    blend2 if timing driven, max_inputs otherwise)
  --clustering_pin_feasibility_filter {on, off}
                    Controls whether the pin counting feasibility filter is used 
                    during clustering. When enabled the clustering engine counts 
                    the number of available pins in groups/classes of mutually 
                    connected pins within a cluster. These counts are used to 
                    quickly filter out candidate primitives/atoms/molecules for 
                    which the cluster has insufficient pins to route (without 
                    performing a full routing). This reduces packer run-time (Default: on)
  --balance_block_type_utilization {on, off, auto}
                    If enabled, when a primitive can potentially be mapped to 
                    multiple block types the packer will
                    pick the block type which (currently) has the lowest 
                    utilization.
                     * on  : Try to balance block type utilization
                     * off : Do not try to balance block type utilization
                     * auto: Dynamically enabled/disabled (based on density)
                     (Default: auto)
  --target_ext_pin_util TARGET_EXT_PIN_UTIL [TARGET_EXT_PIN_UTIL ...]
                    Sets the external pin utilization target during clustering.
                    Value Ranges: [1.0, 0.0]
                    * 1.0 : The packer to pack as densely as possible (i.e. try
                            to use 100% of cluster external pins)
                    * 0.0 : The packer to pack as loosely as possible (i.e. each
                            block will contain a single mollecule).
                            Values in between trade-off pin usage and
                            packing density.
                    
                    Typically packing less densely improves routability, at
                    the cost of using more clusters. Note that these settings 
                    are
                    only guidelines, the packer will use up to 1.0 utilization 
                    if
                    a molecule would not otherwise pack into any cluster type.
                    
                    This option can take multiple specifications in several
                    formats:
                    * auto (i.e. 'auto'): VPR will determine the target pin
                                          utilizations automatically
                    * Single Value (e.g. '0.7'): the input pin utilization for
                                                 all block types (output pin
                                                 utilization defaults to 1.0)
                    * Double Value (e.g. '0.7,0.8'): the input and output pin
                                                 utilization for all block types
                    * Block Value (e.g. 'clb:0.7', 'clb:0.7,0.8'): the pin
                                                 utilization for a specific
                                                 block type
                    These can be used in combination. For example:
                       '--target_ext_pin_util 0.9 clb:0.7'
                    would set the input pin utilization of clb blocks to 0.7,
                    and all other blocks to 0.9.
                     (Default: auto)
  --pack_prioritize_transitive_connectivity {on, off}
                    Whether transitive connectivity is prioritized over 
                    high-fanout connectivity during packing (Default: on)
  --pack_high_fanout_threshold PACK_HIGH_FANOUT_THRESHOLD [PACK_HIGH_FANOUT_THRESHOLD ...]
                    Sets the high fanout threshold during clustering.
                    
                    Typically reducing the threshold reduces packing density
                    and improves routability.
                    This option can take multiple specifications in several
                    formats:
                    * auto (i.e. 'auto'): VPR will determine the target pin
                                          utilizations automatically
                    * Single Value (e.g. '256'): the high fanout threshold
                                                 for all block types
                    * Block Value (e.g. 'clb:16'): the high fanout threshold
                                                   for a specific block type
                    These can be used in combination. For example:
                       '--pack_high_fanout_threshold 256 clb:16'
                    would set the high fanout threshold for clb blocks to 16
                    and all other blocks to 256
                     (Default: auto)
  --pack_transitive_fanout_threshold PACK_TRANSITIVE_FANOUT_THRESHOLD
                    Packer transitive fanout threshold (Default: 4)
  --pack_feasible_block_array_size PACK_FEASIBLE_BLOCK_ARRAY_SIZE
                    This value is used to determine the max size of the
                    priority queue for candidates that pass the early filter
                    legality test but not the more detailed routing test
                     (Default: 30)
  --pack_verbosity PACK_VERBOSITY
                    Controls how verbose clustering's output is. Higher values 
                    produce more output (useful for debugging architecture 
                    packing problems) (Default: 2)
  --use_attraction_groups {on, off}
                    Whether attraction groups are used to make it easier to pack 
                    primitives in the same floorplan region together. (Default: on)
  --pack_num_moves PACK_NUM_MOVES
                    The number of moves that can be tried in packing stage (Default: 100000)
  --pack_move_type PACK_MOVE_TYPE
                    The move type used in packing.The available values are: 
                    randomSwap, semiDirectedSwap, semiDirectedSameTypeSwap (Default: semiDirectedSwap)

placement options:
  --seed SEED       Placement random number generator seed (Default: 1)
  --place_delta_delay_matrix_calculation_method {astar, dijkstra}
                    What algorithm should be used to compute the place delta 
                    matrix.
                    
                     * astar : Find delta delays between OPIN's and IPIN's using
                               the router with the current --astar_fac.
                     * dijkstra : Use Dijkstra's algorithm to find all shortest 
                    paths 
                                  from sampled OPIN's to all IPIN's.
                     (Default: astar)
  --inner_num INNER_NUM
                    Controls number of moves per temperature: inner_num * 
                    num_blocks ^ (4/3) (Default: 0.5)
  --place_effort_scaling {circuit, device_circuit}
                    Controls how the number of placer moves level scales with 
                    circuit
                     and device size:
                      * circuit: proportional to circuit size (num_blocks ^ 4/3)
                      * device_circuit: proportional to device and circuit size
                                        (grid_size ^ 2/3 * num_blocks ^ 2/3)
                     (Default: circuit)
  --init_t INIT_T   Initial temperature for manual annealing schedule (Default: 100.0)
  --exit_t EXIT_T   Temperature at which annealing which terminate for manual 
                    annealing schedule (Default: 0.01)
  --alpha_t ALPHA_T
                    Temperature scaling factor for manual annealing schedule. 
                    Old temperature is multiplied by alpha_t (Default: 0.8)
  --alpha_min ALPHA_MIN
                    For placement using Dusty's annealing schedule. Minimum 
                    (starting) value of alpha. (Default: 0.2)
  --alpha_max ALPHA_MAX
                    For placement using Dusty's annealing schedule. Maximum 
                    (stopping) value of alpha. (Default: 0.9)
  --alpha_decay ALPHA_DECAY
                    For placement using Dusty's annealing schedule. The value 
                    that alpha is scaled by after reset. (Default: 0.7)
  --anneal_success_min ANNEAL_SUCCESS_MIN
                    For placement using Dusty's annealing schedule. Minimum 
                    success ratio when annealing before resetting the 
                    temperature to maintain the target success ratio. (Default: 0.1)
  --anneal_success_target ANNEAL_SUCCESS_TARGET
                    For placement using Dusty's annealing schedule. Target 
                    success ratio when annealing. (Default: 0.25)
  --fix_pins {free, random}
                    Fixes I/O pad locations randomly during placement. Valid 
                    options:
                     * 'free' allows placement to optimize pad locations
                     * 'random' fixes pad locations to arbitrary locations
                    . (Default: free)
  --fix_clusters FIX_CLUSTERS
                    Fixes block locations during placement. Valid options:
                     * path to a file specifying block locations (.place format 
                    with block locations specified).
  --place_algorithm {bounding_box, criticality_timing, slack_timing}
                    Controls which placement algorithm is used. Valid options:
                     * bounding_box: Focuses purely on minimizing the bounding 
                    box wirelength of the circuit. Turns off timing analysis if 
                    specified.
                     * criticality_timing: Focuses on minimizing both the 
                    wirelength and the connection timing costs (criticality * 
                    delay).
                     * slack_timing: Focuses on improving the circuit slack 
                    values to reduce critical path delay.
                     (Default: criticality_timing)
  --place_quench_algorithm {bounding_box, criticality_timing, slack_timing}
                    Controls which placement algorithm is used during placement 
                    quench.
                    If specified, it overrides the option --place_algorithm 
                    during placement quench.
                    Valid options:
                     * bounding_box: Focuses purely on minimizing the bounding 
                    box wirelength of the circuit. Turns off timing analysis if 
                    specified.
                     * criticality_timing: Focuses on minimizing both the 
                    wirelength and the connection timing costs (criticality * 
                    delay).
                     * slack_timing: Focuses on improving the circuit slack 
                    values to reduce critical path delay.
                     (Default: criticality_timing)
  --place_chan_width PLACE_CHAN_WIDTH
                    Sets the assumed channel width during placement. If 
                    --place_chan_width is unspecified, but --route_chan_width is 
                    specified the --route_chan_width value will be used 
                    (otherwise the default value is used). (Default: 100)
  --place_rlim_escape PLACE_RLIM_ESCAPE
                    The fraction of moves which are allowed to ignore the region 
                    limit. For example, a value of 0.1 means 10%% of moves are 
                    allowed to ignore the region limit. (Default: 0.0)
  --place_move_stats PLACE_MOVE_STATS
                    File to write detailed placer move statistics to
  --save_placement_per_temperature SAVE_PLACEMENT_PER_TEMPERATURE
                    Controls how often VPR saves the current placement to a file 
                    per temperature (may be helpful for debugging). The value 
                    specifies how many times the placement should be saved 
                    (values less than 1 disable this feature). (Default: 0)
  --enable_analytic_placer {true, false}
                    Enables the analytic placer. Once analytic placement is 
                    done, the result is passed through the quench phase of the 
                    annealing placer for local improvement (Default: false)
  --place_static_move_prob PLACE_STATIC_MOVE_PROB [PLACE_STATIC_MOVE_PROB ...]
                    The percentage probabilities of different moves in Simulated 
                    Annealing placement.This option is only effective for 
                    timing-driven placement.The numbers listed are interpreted 
                    as the percentage probabilities of {uniformMove, MedianMove, 
                    CentroidMove, WeightedCentroid, WeightedMedian, Timing 
                    feasible Region(TFR), Critical UniformMove}, in that order. (Default: {100, 0, 0, 0, 0, 0, 0})
  --place_static_notiming_move_prob PLACE_STATIC_NOTIMING_MOVE_PROB [PLACE_STATIC_NOTIMING_MOVE_PROB ...]
                    The Probability of different non timing move in Simulated 
                    Annealing.This option is only effective for nontiming driven 
                    placement. The numbers listed are interpreted as the 
                    percentage probabilities of {uniformMove, MedianMove, 
                    CentroidMove}, in that order. (Default: {100, 0, 0})
  --place_high_fanout_net PLACE_HIGH_FANOUT_NET
                    Sets the assumed high fanout net during placement. Any net 
                    with higher fanout would be ignored while calculating some 
                    of the directed moves: Median and WeightedMedian (Default: 10)
  --RL_agent_placement {on, off}
                    Uses a Reinforcement Learning (RL) agent in choosing the 
                    appropiate move type in placement.It activates the RL agent 
                    placement instead of using fixed probability for each move 
                    type. (Default: on)
  --place_agent_multistate {on, off}
                    Enable multistate agent. A second state will be activated 
                    late in the annealing and in the Quench that includes all 
                    the timing driven directed moves. (Default: on)
  --place_checkpointing {on, off}
                    Enable Placement checkpoints. This means saving the 
                    placement and restore it if it's better than later 
                    placements.Only effective if agnet's 2nd state is activated. (Default: on)
  --place_agent_epsilon PLACE_AGENT_EPSILON
                    Placement RL agent's epsilon for epsilon-greedy 
                    agent.Epsilon represents the percentage of exploration 
                    actions taken vs the exploitation ones. (Default: 0.3)
  --place_agent_gamma PLACE_AGENT_GAMMA
                    Controls how quickly the agent's memory decays. Values 
                    between [0., 1.] specify the fraction of weight in the 
                    exponentially weighted reward average applied to moves which 
                    occured greater than moves_per_temp moves ago.Values < 0 
                    cause the unweighted reward sample average to be used (all 
                    samples are weighted equally) (Default: 0.05)
  --place_dm_rlim PLACE_DM_RLIM
                    The maximum range limit of any directed move other than the 
                    uniform move. It also shrinks with the default rlim (Default: 3.0)
  --place_reward_fun PLACE_REWARD_FUN
                    The reward function used by placement RL agent.The available 
                    values are: basic, nonPenalizing_basic, runtime_aware, 
                    WLbiased_runtime_awareThe latter two are only available for 
                    timing-driven placement. (Default: WLbiased_runtime_aware)
  --place_crit_limit PLACE_CRIT_LIMIT
                    The criticality limit to count a block as a critical one (or 
                    have a critical connection). It used in some directed moves 
                    that only move critical blocks like critical uniform and 
                    feasible region. Its range equals to [0., 1.]. (Default: 0.7)
  --place_constraint_expand PLACE_CONSTRAINT_EXPAND
                    The value used to decide how much to expand the floorplan 
                    constraint region when writinga floorplan constraint XML 
                    file. Takes in an integer value from zero to infinity.If the 
                    value is zero, the block stays at the same x, y location. If 
                    it isgreater than zero the constraint region expands by the 
                    specified value in each direction.For example, if 1 was 
                    specified, a block at the x, y location (1, 1) would have a 
                    constraint regionof 2x2 centered around (1, 1), from (0, 0) 
                    to (2, 2). (Default: 0)
  --place_constraint_subtile {on, off}
                    The bool used to say whether to print subtile constraints 
                    when printing a floorplan constraints XML file.If it is off, 
                    no subtile locations are specified when printing the 
                    floorplan constraints.If it is on, the floorplan constraints 
                    are printed with the subtiles from current placement. (Default: off)
  --floorplan_num_horizontal_partitions FLOORPLAN_NUM_HORIZONTAL_PARTITIONS
                    An argument used for generating test constraints files. 
                    Specifies how many partitions to make in the horizontal 
                    dimension. Must be used in conjunction with 
                    --floorplan_num_vertical_partitions (Default: 0)
  --floorplan_num_vertical_partitions FLOORPLAN_NUM_VERTICAL_PARTITIONS
                    An argument used for generating test constraints files. 
                    Specifies how many partitions to make in the vertical 
                    dimension. Must be used in conjunction with 
                    --floorplan_num_horizontal_partitions (Default: 0)
  --place_agent_algorithm {e_greedy, softmax}
                    Controls which placement RL agent is used (Default: softmax)

timing-driven placement options:
  --timing_tradeoff TIMING_TRADEOFF
                    Trade-off control between delay and wirelength during 
                    placement. 0.0 focuses completely on wirelength, 1.0 
                    completely on timing (Default: 0.5)
  --recompute_crit_iter RECOMPUTE_CRIT_ITER
                    Controls how many temperature updates occur between timing 
                    analysis during placement (Default: 1)
  --inner_loop_recompute_divider INNER_LOOP_RECOMPUTE_DIVIDER
                    Controls how many timing analysies are perform per 
                    temperature during placement (Default: 0)
  --quench_recompute_divider QUENCH_RECOMPUTE_DIVIDER
                    Controls how many timing analysies are perform during the 
                    final placement quench (t=0). If unspecified, uses the value 
                    from --inner_loop_recompute_divider (Default: 0)
  --td_place_exp_first TD_PLACE_EXP_FIRST
                    Controls how critical a connection is as a function of slack 
                    at the start of placement. A value of zero treats all 
                    connections as equally critical (regardless of slack). 
                    Values larger than 1.0 cause low slack connections to be 
                    treated more critically. The value increases to 
                    --td_place_exp_last during placement. (Default: 1.0)
  --td_place_exp_last TD_PLACE_EXP_LAST
                    Controls how critical a connection is as a function of slack 
                    at the end of placement. (Default: 8.0)
  --place_delay_model {delta, delta_override}
                    This option controls what information is considered and how 
                    the placement delay model is constructed.
                    Valid options:
                     * 'delta' uses differences in position only
                     * 'delta_override' uses differences in position with 
                    overrides for direct connects
                     (Default: delta)
  --place_delay_model_reducer {min, max, median, arithmean, geomean}
                    When calculating delta delays for the placment delay model 
                    how are multiple values combined? (Default: min)
  --place_delay_offset PLACE_DELAY_OFFSET
                    A constant offset (in seconds) applied to the placer's delay 
                    model. (Default: 0.0)
  --place_delay_ramp_delta_threshold PLACE_DELAY_RAMP_DELTA_THRESHOLD
                    The delta distance beyond which --place_delay_ramp is 
                    applied. Negative values disable the placer delay ramp. (Default: -1)
  --place_delay_ramp_slope PLACE_DELAY_RAMP_SLOPE
                    The slope of the ramp (in seconds per grid tile) which is 
                    applied to the placer delay model for delta distance beyond 
                    --place_delay_ramp_delta_threshold (Default: 0.0e-9)
  --place_tsu_rel_margin PLACE_TSU_REL_MARGIN
                    Specifies the scaling factor for cell setup times used by 
                    the placer. This effectively controls whether the placer 
                    should try to achieve extra margin on setup paths. For 
                    example a value of 1.1 corresponds to requesting 10%% setup 
                    margin. (Default: 1.0)
  --place_tsu_abs_margin PLACE_TSU_ABS_MARGIN
                    Specifies an absolute offest added to cell setup times used 
                    by the placer. This effectively controls whether the placer 
                    should try to achieve extra margin on setup paths. For 
                    example a value of 500e-12 corresponds to requesting an 
                    extra 500ps of setup margin. (Default: 0.0)
  --post_place_timing_report POST_PLACE_TIMING_REPORT
                    Name of the post-placement timing report file (not generated 
                    if unspecfied)
  --allowed_tiles_for_delay_model ALLOWED_TILES_FOR_DELAY_MODEL
                    Names of allowed tile types that can be sampled during delay 
                    modelling.  Default is to allow all tiles. Can be used to 
                    exclude specialized tiles from placer delay sampling.

routing options:
  --max_router_iterations MAX_ROUTER_ITERATIONS
                    Maximum number of Pathfinder-based routing iterations before 
                    the circuit is declared unroutable at a given channel width (Default: 50)
  --first_iter_pres_fac FIRST_ITER_PRES_FAC
                    Sets the present overuse factor for the first routing 
                    iteration (Default: 0.0)
  --initial_pres_fac INITIAL_PRES_FAC
                    Sets the present overuse factor for the second routing 
                    iteration (Default: 0.5)
  --pres_fac_mult PRES_FAC_MULT
                    Sets the growth factor by which the present overuse penalty 
                    factor is multiplied after each routing iteration (Default: 1.3)
  --acc_fac ACC_FAC
                    Specifies the accumulated overuse factor (historical 
                    congestion cost factor) (Default: 1.0)
  --bb_factor BB_FACTOR
                    Sets the distance (in channels) outside a connection's 
                    bounding box which can be explored during routing (Default: 3)
  --base_cost_type {demand_only, demand_only_normalized_length, delay_normalized, delay_normalized_length, delay_normalized_length_bounded, delay_normalized_frequency, delay_normalized_length_frequency}
                    Sets the basic cost of routing resource nodes:
                     * demand_only: based on expected demand of node type
                     * demand_only_normalized_length: based on expected 
                          demand of node type normalized by length
                     * delay_normalized: like demand_only but normalized
                          to magnitude of typical routing resource delay
                     * delay_normalized_length: like delay_normalized but
                          scaled by routing resource length
                     * delay_normalized_length_bounded: like delay_normalized 
                    but
                          scaled by routing resource length.  Scaling is 
                    normalized
                          between 1 to 4, with min lengths getting scaled at 1,
                          and max lengths getting scaled at 4.
                     * delay_normalized_frequency: like delay_normalized
                          but scaled inversely by segment type frequency
                     * delay_normalized_length_frequency: like delay_normalized
                          but scaled by routing resource length, and inversely
                          by segment type frequency
                    (Default: demand_only for breadth-first router,
                              delay_normalized_length for timing-driven router)
  --bend_cost BEND_COST
                    The cost of a bend. (Default: 1.0 for global routing, 0.0 
                    for detailed routing)
  --route_type {global, detailed}
                    Specifies whether global, or combined global and detailed 
                    routing is performed. (Default: detailed)
  --route_chan_width CHANNEL_WIDTH
                    Specifies a fixed channel width to route at. A value of -1 
                    indicates that the minimum channel width should be determined (Default: -1)
  --min_route_chan_width_hint MIN_ROUTE_CHAN_WIDTH_HINT
                    Hint to the router what the minimum routable channel width 
                    is. Good hints can speed-up determining the minimum channel 
                    width.
  --verify_binary_search {on, off}
                    Force the router to verify the minimum channel width by 
                    routing at consecutively lower channel widths until two 
                    consecutive failures are observed. (Default: off)
  --router_algorithm {breadth_first, timing_driven}
                    Specifies the router algorithm to use.
                     * breadth_first: focuses solely on routability [DEPRECATED, 
                    inferior quality & run-time]
                     * timing_driven: focuses on routability and circuit speed
                     (Default: timing_driven)
  --min_incremental_reroute_fanout MIN_INCREMENTAL_REROUTE_FANOUT
                    The net fanout threshold above which nets will be re-routed 
                    incrementally. (Default: 16)
  --exit_after_first_routing_iteration {on, off}
                    Causes VPR to exit after the first routing iteration (useful 
                    for saving graphics) (Default: off)
  --max_logged_overused_rr_nodes MAX_LOGGED_OVERUSED_RR_NODES
                    Maximum number of overused RR nodes logged each time the 
                    routing fails (Default: 20)
  --generate_rr_node_overuse_report {on, off}
                    Generate detailed reports on overused rr nodes and congested 
                    nets should the routing fails (Default: off)
  --reorder_rr_graph_nodes_algorithm {none, degree_bfs, random_shuffle}
                    Specifies the node reordering algorithm to use.
                     * none: don't reorder nodes
                     * degree_bfs: sort by degree and then by BFS
                     * random_shuffle: a random shuffle
                     (Default: none)
  --reorder_rr_graph_nodes_threshold REORDER_RR_GRAPH_NODES_THRESHOLD
                    Reorder rr_graph nodes to optimize memory layout above this 
                    number of nodes. (Default: 0)
  --reorder_rr_graph_nodes_seed REORDER_RR_GRAPH_NODES_SEED
                    Pseudo-random number generator seed used for the 
                    random_shuffle reordering algorithm (Default: 1)
  --flat_routing {true, false}
                    Enable VPR's flat routing (routing the nets from the source 
                    primitive to the destination primitive) (Default: false)
  --has_choking_spot {true, false}
                    Some FPGA architectures, due to the lack of full 
                    connectivity inside the cluster, may have a choking spot 
                    inside the cluster. Thus, if routing doesn't converge, 
                    enabling this option may help it. (Default: false)

timing-driven routing options:
  --astar_fac ASTAR_FAC
                    Controls the directedness of the timing-driven router's 
                    exploration. Values between 1 and 2 are resonable; higher 
                    values trade some quality for reduced run-time (Default: 1.2)
  --router_profiler_astar_fac ROUTER_PROFILER_ASTAR_FAC
                    Controls the directedness of the timing-driven router's 
                    exploration when doing router delay profiling. The router 
                    delay profiling step is currently used to calculate the 
                    place delay matrix lookup. Values between 1 and 2 are 
                    resonable; higher values trade some quality for reduced 
                    run-time (Default: 1.2)
  --max_criticality MAX_CRITICALITY
                    Sets the maximum fraction of routing cost derived from delay 
                    (vs routability) for any net. 0.0 means no attention is paid 
                    to delay, 1.0 means nets on the critical path ignore 
                    congestion (Default: 0.99)
  --criticality_exp CRITICALITY_EXP
                    Controls the delay-routability trade-off for nets as a 
                    function of slack. 0.0 implies all nets treated equally 
                    regardless of slack. At large values (>> 1) only nets on the 
                    critical path will consider delay. (Default: 1.0)
  --router_init_wirelength_abort_threshold ROUTER_INIT_WIRELENGTH_ABORT_THRESHOLD
                    The first routing iteration wirelength abort threshold. If 
                    the first routing iteration uses more than this fraction of 
                    available wirelength routing is aborted. (Default: 0.85)
  --incremental_reroute_delay_ripup {on, off, auto}
                    Controls whether incremental net routing will rip-up (and 
                    re-route) a critical connection for delay, even if the 
                    routing is legal. (Default: auto)
  --routing_failure_predictor {safe, aggressive, off}
                    Controls how aggressively the router will predict a routing 
                    as unsuccessful and give up early. This can significantly 
                    reducing the run-time required to find the minimum channel 
                    width.
                     * safe: Only abort when it is extremely unlikely a routing 
                    will succeed
                     * aggressive: Further reduce run-time by giving up earlier. 
                    This may increase the reported minimum channel width
                     * off: Only abort when the maximum number of iterations is 
                    reached
                     (Default: safe)
  --routing_budgets_algorithm {minimax, scale_delay, yoyo, disable}
                    Controls how the routing budgets are created and applied.
                     * yoyo: Allocates budgets using minimax algorithm, and 
                    enables hold slack resolution in the router using the RCV 
                    algorithm. [EXPERIMENTAL]
                     * minimax: Sets the budgets depending on the amount slack 
                    between connections and the current delay values. 
                    [EXPERIMENTAL]
                     * scale_delay: Sets the minimum budgets to 0 and the 
                    maximum budgets as a function of delay and criticality (net 
                    delay/ pin criticality) [EXPERIMENTAL]
                     * disable: Removes the routing budgets, use the default VPR 
                    and ignore hold time constraints
                     (Default: disable)
  --save_routing_per_iteration {on, off}
                    Controls whether VPR saves the current routing to a file 
                    after each routing iteration. May be helpful for debugging. (Default: off)
  --congested_routing_iteration_threshold CONGESTED_ROUTING_ITERATION_THRESHOLD
                    Controls when the router enters a high effort mode to 
                    resolve lingering routing congestion. Value is the fraction 
                    of max_router_iterations beyond which the routing is deemed 
                    congested. (Default: 1.0)
  --route_bb_update {static, dynamic}
                    Controls how the router's net bounding boxes are updated:
                     * static : bounding boxes are never updated
                     * dynamic: bounding boxes are updated dynamically as 
                    routing progresses
                     (Default: dynamic)
  --router_high_fanout_threshold ROUTER_HIGH_FANOUT_THRESHOLD
                    Specifies the net fanout beyond which a net is considered 
                    high fanout. Values less than zero disable special behaviour 
                    for high fanout nets (Default: 64)
  --router_high_fanout_max_slope ROUTER_HIGH_FANOUT_MAX_SLOPE
                    Minimum routing progress where high fanout routing is 
                    enabled. This is a ratio of the actual congestion reduction 
                    to what is expected based in the history.
                     1.0 is normal progress, 0 is no progress. (Default: 0.1)
  --router_lookahead {classic, map, extended_map}
                    Controls what lookahead the router uses to calculate cost of 
                    completing a connection.
                     * classic: The classic VPR lookahead (may perform better on 
                    un-buffered routing
                                architectures)
                     * map: An advanced lookahead which accounts for diverse 
                    wire type
                     * extended_map: A more advanced and extended lookahead 
                    which accounts for a more
                                     exhaustive node sampling method
                    
                     The extended map differs from the map lookahead in the 
                    lookahead computation.
                     It is better suited for architectures that have specialized 
                    routing for specific
                     kinds of connections, but note that the time and memory 
                    necessary to compute the
                     extended lookahead map are greater than the basic lookahead 
                    map.
                     (Default: map)
  --router_max_convergence_count ROUTER_MAX_CONVERGENCE_COUNT
                    Controls how many times the router is allowed to converge to 
                    a legal routing before halting. If multiple legal solutions 
                    are found the best quality implementation is used. (Default: 1)
  --router_reconvergence_cpd_threshold ROUTER_RECONVERGENCE_CPD_THRESHOLD
                    Specifies the minimum potential CPD improvement for which 
                    the router will continue to attempt re-convergent routing. 
                    For example, a value of 0.99 means the router will not give 
                    up on reconvergent routing if it thinks a > 1% CPD reduction 
                    is possible. (Default: 0.99)
  --router_initial_timing {all_critical, lookahead}
                    Controls how criticality is determined at the start of the 
                    first routing iteration.
                     * all_critical: All connections are considered timing
                                     critical.
                     * lookahead   : Connection criticalities are determined
                                     from timing analysis assuming best-case
                                     connection delays as estimated by the
                                     router's lookahead.
                    (Default: 'lookahead' if a non-classic router lookahead is
                               used, otherwise 'all_critical')
                     (Default: lookahead)
  --router_update_lower_bound_delays {on, off}
                    Controls whether the router updates lower bound connection 
                    delays after the 1st routing iteration. (Default: on)
  --router_heap {binary, bucket}
                    Controls what type of heap to use for timing driven router.
                     * binary: A binary heap is used.
                     * bucket: A bucket heap approximation is used. The bucket 
                    heap
                     *         is faster because it is only a heap 
                    approximation.
                     *         Testing has shown the approximation results in
                     *         similiar QoR with less CPU work.
                     (Default: binary)
  --router_first_iter_timing_report ROUTER_FIRST_ITER_TIMING_REPORT
                    Name of the post first routing iteration timing report file 
                    (not generated if unspecfied)
  --read_rr_edge_metadata {on, off}
                    Read RR edge metadata from --read_rr_graph.  RR edge 
                    metadata is not used in core VPR algorithms, and is 
                    typically not read to save runtime and memory. (Default: 
                    off). (Default: off)
  --check_route {off, quick, full}
                    Options to run check route in three different modes.
                     * off    : check route is completely disabled.
                     * quick  : runs check route with slow checks disabled.
                     * full   : runs the full check route step.
                     (Default: full)
  --router_debug_net ROUTER_DEBUG_NET
                    Controls when router debugging is enabled for nets.
                     * For values >= 0, the value is taken as the net ID for
                       which to enable router debug output.
                     * For value == -1, router debug output is enabled for
                       all nets.
                     * For values < -1, all net-based router debug output is 
                    disabled.
                    Note if VPR as compiled without debug logging enabled this 
                    will produce only limited output.
                     (Default: -2)
  --router_debug_sink_rr ROUTER_DEBUG_SINK_RR
                    Controls when router debugging is enabled for the specified 
                    sink RR.
                     * For values >= 0, the value is taken as the sink RR Node 
                    ID for
                       which to enable router debug output.
                     * For values < 0, sink-based router debug output is 
                    disabled.
                    Note if VPR as compiled without debug logging enabled this 
                    will produce only limited output.
                     (Default: -2)
  --router_debug_iteration ROUTER_DEBUG_ITERATION
                    Controls when router debugging is enabled for the specific 
                    router iteration.
                     * For values >= 0, the value is taken as the iteration 
                    number for
                       which to enable router debug output.
                     * For values < 0, all iteration-based router debug output 
                    is disabled.
                    Note if VPR as compiled without debug logging enabled this 
                    will produce only limited output.
                     (Default: -2)
  --check_rr_graph {on, off}
                    Controls whether to check the rr graph when reading from 
                    disk. (Default: on)

analysis options:
  --full_stats {on, off}
                    Print extra statistics about the circuit and it's routing 
                    (useful for wireability analysis) (Default: off)
  --gen_post_synthesis_netlist {on, off}
                    Generates the post-synthesis netlist (in BLIF and Verilog) 
                    along with delay information (in SDF). Used for 
                    post-implementation simulation and verification (Default: off)
  --gen_post_implementation_merged_netlist {on, off}
                    Generates the post-implementation netlist with merged top 
                    module ports Used for post-implementation simulation and 
                    verification (Default: off)
  --timing_report_npaths TIMING_REPORT_NPATHS
                    Controls how many timing paths are reported. (Default: 100)
  --timing_report_detail {netlist, aggregated, detailed, debug}
                    Controls how much detail is provided in timing reports.
                     * netlist: Shows only netlist pins
                     * aggregated: Like 'netlist', but also shows aggregated 
                    intra-block/inter-block delays
                     * detailed: Like 'aggregated' but shows detailed routing 
                    instead of aggregated inter-block delays
                     * debug: Like 'detailed' but shows additional tool internal 
                    debug information
                     (Default: netlist)
  --timing_report_skew {on, off}
                    Controls whether skew timing reports are generated
                     (Default: off)
  --echo_dot_timing_graph_node ECHO_DOT_TIMING_GRAPH_NODE
                    Controls how the timing graph echo file in DOT/GraphViz 
                    format is created when
                    '--echo_file on' is set:
                     * -1: All nodes are dumped into the DOT file
                     * >= 0: Only the transitive fanin/fanout of the node is 
                    dumped (easier to view)
                     * a string: Interpretted as a VPR pin name which is 
                    converted to a node id, and dumped as above
                     (Default: -1)
  --post_synth_netlist_unconn_inputs {unconnected, nets, gnd, vcc}
                    Controls how unconnected input cell ports are handled in the 
                    post-synthesis netlist
                     * unconnected: leave unconnected
                     * nets: connect each unconnected input pin to its own 
                    separate
                             undriven net named: __vpr__unconn<ID>, where <ID> 
                    is index
                             assigned to this occurrence of unconnected port in 
                    design
                     * gnd: tie all to ground (1'b0)
                     * vcc: tie all to VCC (1'b1)
                     (Default: unconnected)
  --post_synth_netlist_unconn_outputs {unconnected, nets}
                    Controls how unconnected output cell ports are handled in 
                    the post-synthesis netlist
                     * unconnected: leave unconnected
                     * nets: connect each unconnected input pin to its own 
                    separate
                             undriven net named: __vpr__unconn<ID>, where <ID> 
                    is index
                             assigned to this occurrence of unconnected port in 
                    design
                     (Default: unconnected)
  --write_timing_summary WRITE_TIMING_SUMMARY
                    Writes implemented design final timing summary to the 
                    specified JSON, XML or TXT file.

power analysis options:
  --power           Enable power estimation (Default: off)
  --tech_properties TECH_PROPERTIES
                    XML file containing CMOS technology properties (see 
                    documentation).
  --activity_file ACTIVITY_FILE
                    Signal activities file for all nets (see documentation).

noc options:
  --noc {on, off}   Enables a NoC-driven placer that optimizes the placement of 
                    routers on the NoC.Also enables an option in the graphical 
                    display that can be used to display the NoC on the FPGA.This 
                    should be on only when the FPGA device contains a NoC and 
                    the provided netlist connects to the NoC. (Default: off)
  --noc_flows_file NOC_FLOWS_FILE
                    XML file containing the list of traffic flows within the NoC 
                    (communication between routers).This is required if the 
                    --noc option is turned on.
  --noc_routing_algorithm {xy_routing, bfs_routing}
                    Controls the algorithm used by the NoC to route packets.
                    * xy_routing: Uses the direction oriented routing algorithm. 
                    This is recommended to be used with mesh NoC topologies.
                    * bfs_routing: Uses the breadth first search algorithm. The 
                    objective is to find a route that uses a minimum number of 
                    links.
                    This can be used with any NoC topology
                     (Default: bfs_routing)
  --noc_placement_weighting NOC_PLACEMENT_WEIGHTING
                    Controls the importance of the NoC placement parameters 
                    relative to timing and wirelength of the design.This value 
                    can be >=0, where 0 would mean the placement is based solely 
                    on timing and wirelength, a value of 1 would mean noc 
                    placement is considered equal to timing and wirelength and a 
                    value greater than 1 would mean the placement is 
                    increasingly dominated by NoC parameters. (Default: 0.6)
  --noc_latency_constraints_weighting NOC_LATENCY_CONSTRAINTS_WEIGHTING
                    Controls the importance of meeting all the NoC traffic flow 
                    latency constraints.This value can be >=0, where 0 would 
                    mean the latency constraints have no relevance to placement, 
                    a value of 1 would mean the latency constraints are weighted 
                    equally to the sum of other placement cost components and a 
                    value greater than 1 would mean the placement is 
                    increasingly dominated by meeting the latency constraints of 
                    the traffic flows. (Default: 1)
  --noc_latency_weighting NOC_LATENCY_WEIGHTING
                    Controls the importance of reducing the latencies of the NoC 
                    traffic flows.This value can be >=0, where 0 would mean the 
                    latencies have no relevance to placement, a value of 1 would 
                    mean the latencies  are weighted equally to the sum of other 
                    placement cost components and a value greater than 1 would 
                    mean the placement is increasingly dominated by reducing the 
                    latencies of the traffic flows. (Default: 0.05)
  --noc_swap_percentage NOC_SWAP_PERCENTAGE
                    Sets the minimum fraction of swaps attempted by the placer 
                    that are NoC blocks.This value is an integer ranging from 
                    0-100. 0 means NoC blocks will be moved at the same rate as 
                    other blocks. 100 means all swaps attempted by the placer 
                    are NoC router blocks. (Default: 40)
  --noc_placement_file_name NOC_PLACEMENT_FILE_NAME
                    Name of the output file that contains the NoC placement 
                    information.The default name is 
                    'vpr_noc_placement_output.txt' (Default: vpr_noc_placement_output.txt)

Usage Examples
--------------
   #Find the minimum routable channel width of my_circuit on my_arch
   vpr my_arch.xml my_circuit.blif

   #Show interactive graphics
   vpr my_arch.xml my_circuit.blif --disp on

   #Implement at a fixed channel width of 100
   vpr my_arch.xml my_circuit.blif --route_chan_width 100

   #Perform packing and placement only
   vpr my_arch.xml my_circuit.blif --pack --place

   #Generate post-implementation netlist
   vpr my_arch.xml my_circuit.blif --gen_post_synthesis_netlist on

   #Write routing-resource graph to a file
   vpr my_arch.xml my_circuit.blif --write_rr_graph my_rr_graph.xml


For additional documentation see: https://docs.verilogtorouting.org
