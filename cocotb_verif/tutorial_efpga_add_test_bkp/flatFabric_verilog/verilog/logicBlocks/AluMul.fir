circuit AluMul :
  module AluMul :
    input clock : Clock
    input reset : UInt<1>
    output io : { flip i0 : UInt<16>, flip i1 : UInt<16>, flip ib32 : UInt<32>, flip ctrl : UInt<8>, q : UInt<16>, ob32 : UInt<32>, flip config : UInt<32>, flip gndOuts : UInt<1>, flip clkEnb : UInt<1>, flip loopBreak : UInt<1>}

    node _i0FF_T = eq(io.clkEnb, UInt<1>("h0")) @[CLBlut4N10Mul.scala 100:44]
    reg i0FF : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[Reg.scala 28:20]
    when _i0FF_T : @[Reg.scala 29:18]
      i0FF <= io.i0 @[Reg.scala 29:22]
    node _i1FF_T = eq(io.clkEnb, UInt<1>("h0")) @[CLBlut4N10Mul.scala 101:36]
    reg i1FF : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[Reg.scala 28:20]
    when _i1FF_T : @[Reg.scala 29:18]
      i1FF <= io.i1 @[Reg.scala 29:22]
    node _ib32FF_T = eq(io.clkEnb, UInt<1>("h0")) @[CLBlut4N10Mul.scala 102:40]
    reg ib32FF : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[Reg.scala 28:20]
    when _ib32FF_T : @[Reg.scala 29:18]
      ib32FF <= io.ib32 @[Reg.scala 29:22]
    node _in0_T = bits(io.config, 0, 0) @[CLBlut4N10Mul.scala 104:26]
    node _in0_T_1 = mux(_in0_T, io.i0, i0FF) @[CLBlut4N10Mul.scala 104:16]
    node in0 = asSInt(_in0_T_1) @[CLBlut4N10Mul.scala 104:44]
    node _in1_T = bits(io.config, 1, 1) @[CLBlut4N10Mul.scala 105:26]
    node _in1_T_1 = mux(_in1_T, io.i1, i1FF) @[CLBlut4N10Mul.scala 105:16]
    node in1 = asSInt(_in1_T_1) @[CLBlut4N10Mul.scala 105:44]
    node _ib32_T = bits(io.config, 2, 2) @[CLBlut4N10Mul.scala 106:27]
    node _ib32_T_1 = mux(_ib32_T, io.ib32, ib32FF) @[CLBlut4N10Mul.scala 106:17]
    node ib32 = asSInt(_ib32_T_1) @[CLBlut4N10Mul.scala 106:49]
    node _add_T = add(in0, in1) @[CLBlut4N10Mul.scala 108:17]
    node _add_T_1 = tail(_add_T, 1) @[CLBlut4N10Mul.scala 108:17]
    node _add_T_2 = asSInt(_add_T_1) @[CLBlut4N10Mul.scala 108:17]
    node _add_T_3 = add(_add_T_2, ib32) @[CLBlut4N10Mul.scala 108:23]
    node _add_T_4 = tail(_add_T_3, 1) @[CLBlut4N10Mul.scala 108:23]
    node add = asSInt(_add_T_4) @[CLBlut4N10Mul.scala 108:23]
    wire mul16 : SInt<32> @[CLBlut4N10Mul.scala 109:19]
    node _mul16_T = mul(in0, in1) @[CLBlut4N10Mul.scala 110:16]
    mul16 <= _mul16_T @[CLBlut4N10Mul.scala 110:9]
    node _mux_T = bits(io.ctrl, 3, 3) @[CLBlut4N10Mul.scala 111:44]
    node _mux_T_1 = mux(_mux_T, in1, in0) @[CLBlut4N10Mul.scala 111:36]
    node mux_lo = asUInt(_mux_T_1) @[Cat.scala 31:58]
    node mux_hi = asUInt(asSInt(UInt<16>("h0"))) @[Cat.scala 31:58]
    node _mux_T_2 = cat(mux_hi, mux_lo) @[Cat.scala 31:58]
    node mux = asSInt(_mux_T_2) @[CLBlut4N10Mul.scala 111:60]
    wire accFF : SInt<32> @[CLBlut4N10Mul.scala 112:19]
    node _accVal_T = bits(io.config, 4, 4) @[CLBlut4N10Mul.scala 113:33]
    node _accVal_T_1 = bits(io.config, 3, 3) @[CLBlut4N10Mul.scala 113:47]
    node _accVal_T_2 = cat(_accVal_T, _accVal_T_1) @[Cat.scala 31:58]
    node _accVal_T_3 = eq(_accVal_T_2, UInt<2>("h2")) @[CLBlut4N10Mul.scala 113:51]
    node accVal = mux(_accVal_T_3, accFF, asSInt(UInt<1>("h0"))) @[CLBlut4N10Mul.scala 113:19]
    node _mac_T = add(mul16, ib32) @[CLBlut4N10Mul.scala 114:19]
    node _mac_T_1 = tail(_mac_T, 1) @[CLBlut4N10Mul.scala 114:19]
    node _mac_T_2 = asSInt(_mac_T_1) @[CLBlut4N10Mul.scala 114:19]
    node _mac_T_3 = add(_mac_T_2, accVal) @[CLBlut4N10Mul.scala 114:26]
    node _mac_T_4 = tail(_mac_T_3, 1) @[CLBlut4N10Mul.scala 114:26]
    node mac = asSInt(_mac_T_4) @[CLBlut4N10Mul.scala 114:26]
    node _combOut_T = bits(io.config, 4, 4) @[CLBlut4N10Mul.scala 115:40]
    node _combOut_T_1 = bits(io.config, 3, 3) @[CLBlut4N10Mul.scala 115:54]
    node _combOut_T_2 = cat(_combOut_T, _combOut_T_1) @[Cat.scala 31:58]
    node _combOut_T_3 = eq(UInt<1>("h1"), _combOut_T_2) @[Mux.scala 81:61]
    node _combOut_T_4 = mux(_combOut_T_3, mul16, add) @[Mux.scala 81:58]
    node _combOut_T_5 = eq(UInt<2>("h2"), _combOut_T_2) @[Mux.scala 81:61]
    node _combOut_T_6 = mux(_combOut_T_5, mac, _combOut_T_4) @[Mux.scala 81:58]
    node _combOut_T_7 = eq(UInt<2>("h3"), _combOut_T_2) @[Mux.scala 81:61]
    node combOut = mux(_combOut_T_7, mux, _combOut_T_6) @[Mux.scala 81:58]
    node _accFF_T = bits(io.ctrl, 0, 0) @[CLBlut4N10Mul.scala 117:33]
    node _accFF_T_1 = mux(_accFF_T, asSInt(UInt<1>("h0")), combOut) @[CLBlut4N10Mul.scala 117:25]
    node _accFF_T_2 = bits(io.ctrl, 1, 1) @[CLBlut4N10Mul.scala 117:65]
    node _accFF_T_3 = eq(io.clkEnb, UInt<1>("h0")) @[CLBlut4N10Mul.scala 117:71]
    node _accFF_T_4 = and(_accFF_T_2, _accFF_T_3) @[CLBlut4N10Mul.scala 117:69]
    reg accFF_r : SInt, clock with :
      reset => (reset, asSInt(UInt<1>("h0"))) @[Reg.scala 28:20]
    when _accFF_T_4 : @[Reg.scala 29:18]
      accFF_r <= _accFF_T_1 @[Reg.scala 29:22]
    accFF <= accFF_r @[CLBlut4N10Mul.scala 117:9]
    node _out_T = bits(io.config, 7, 7) @[CLBlut4N10Mul.scala 120:47]
    node _out_T_1 = or(_out_T, io.loopBreak) @[CLBlut4N10Mul.scala 120:51]
    node _out_T_2 = mux(_out_T_1, accFF, combOut) @[CLBlut4N10Mul.scala 120:37]
    node _out_T_3 = asUInt(_out_T_2) @[CLBlut4N10Mul.scala 120:83]
    node out = mux(io.gndOuts, UInt<1>("h0"), _out_T_3) @[CLBlut4N10Mul.scala 120:16]
    io.ob32 <= out @[CLBlut4N10Mul.scala 121:11]
    node _io_q_T = bits(io.ctrl, 2, 2) @[CLBlut4N10Mul.scala 122:22]
    node _io_q_T_1 = bits(out, 31, 16) @[CLBlut4N10Mul.scala 122:30]
    node _io_q_T_2 = bits(out, 15, 0) @[CLBlut4N10Mul.scala 122:42]
    node _io_q_T_3 = mux(_io_q_T, _io_q_T_1, _io_q_T_2) @[CLBlut4N10Mul.scala 122:14]
    io.q <= _io_q_T_3 @[CLBlut4N10Mul.scala 122:8]

